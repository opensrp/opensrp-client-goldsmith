apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'com.github.kt3k.coveralls'
//apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'org.smartregister.gradle.jarjar'

buildscript {
    repositories {
        google()
        jcenter()
        maven { url 'https://maven.fabric.io/public' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    }
    dependencies {
        classpath "com.android.tools.build:gradle:$androidToolsBuildGradle"
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'io.fabric.tools:gradle:1.31.2'
        classpath 'org.smartregister:gradle-jarjar-plugin:1.0.0-SNAPSHOT'
    }
}

jacoco {
    toolVersion = "0.8.0"
}

android {
    useLibrary 'org.apache.http.legacy'
    compileSdkVersion androidCompileSdkVersion
    buildToolsVersion androidBuildToolsVersion

    defaultConfig {
        applicationId "org.smartregister.goldsmith"
        minSdkVersion androidMinSdkVersion
        targetSdkVersion androidTargetSdkVersion
        versionCode 1
        versionName "0.0.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        multiDexEnabled true
        buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
        buildConfigField "boolean", "TIME_CHECK", "false"
        buildConfigField "String", "SYNC_TYPE", '"teamId"'
        buildConfigField "int", "MAX_SYNC_RETRIES", '3'
        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "boolean", "IS_SYNC_SETTINGS", "false"


        if (project.rootProject.file("local.properties").exists()) {
            Properties properties = new Properties()
            properties.load(project.rootProject.file("local.properties").newDataInputStream())

            if (properties != null && properties.containsKey("oauth.client.id")) {
                buildConfigField "String", "OAUTH_CLIENT_ID", properties["oauth.client.id"]
            } else {
                project.logger.error("oauth.client.id variable is not set in your local.properties")
            }

            if (properties != null && properties.containsKey("oauth.client.secret")) {
                buildConfigField "String", "OAUTH_CLIENT_SECRET", properties["oauth.client.secret"]
            } else {
                project.logger.error("oauth.client.secret variable is not set in your local.properties")
            }
        } else {
            println("local.properties does not exist")
            buildConfigField "String", "OAUTH_CLIENT_ID", "\"oauth\""
            buildConfigField "String", "OAUTH_CLIENT_SECRET", "\"sample\""
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", 'opensrp_url', '"https://goldsmith.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '250'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '100'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            buildConfigField "int", "DATABASE_VERSION", '5'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '180'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '180'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "String[]", "LOCATION_LEVELS", '{"Country", "Region", "District", "Delegation", "Health Facility"}'
            buildConfigField "String[]", "HEALTH_FACILITY_LEVELS", '{"Country", "Region", "District", "Delegation", "Health Facility"}'
            buildConfigField "String", 'DEFAULT_LOCATION', '"Health Facility"'
            buildConfigField "String", 'PNC_PLAN_ID', '"d652d9ae-2ff9-41e4-9bb3-fd4cd2ea0e2e"'
        }

        debug {
            minifyEnabled false
            testCoverageEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", 'opensrp_url', '"https://goldsmith-stage.smartregister.org/opensrp/"'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_INITIAL_BATCH_SIZE", '50'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_BATCH_SIZE", '25'
            buildConfigField "int", "OPENMRS_UNIQUE_ID_SOURCE", '2'
            buildConfigField "int", "VACCINE_SYNC_TIME", '0'
            buildConfigField "int", "DATABASE_VERSION", '5'
            buildConfigField "long", "MAX_SERVER_TIME_DIFFERENCE", "1800000l"
            buildConfigField "boolean", "TIME_CHECK", "true"
            buildConfigField "int", "DATA_SYNC_DURATION_MINUTES", '15'
            buildConfigField "int", "VACCINE_SYNC_PROCESSING_MINUTES", '30'
            buildConfigField "int", "IMAGE_UPLOAD_MINUTES", '15'
            buildConfigField "int", "PULL_UNIQUE_IDS_MINUTES", '15'
            buildConfigField "int", "VIEW_SYNC_CONFIGURATIONS_MINUTES", '15'
            buildConfigField "int", "CLIENT_SETTINGS_SYNC_MINUTES", '15'
            buildConfigField "int", "GROWTH_MONITORING_SYNC_TIME", '15'
            buildConfigField "int", "HOME_VISIT_MINUTES", '60'
            buildConfigField "int", "BASE_PNC_CLOSE_MINUTES", '1440'
            buildConfigField "String[]", "LOCATION_LEVELS", '{"Country", "Region", "District", "Delegation", "Health Facility"}'
            buildConfigField "String[]", "HEALTH_FACILITY_LEVELS", '{"Country", "Region", "District", "Delegation", "Health Facility"}'
            buildConfigField "String", 'DEFAULT_LOCATION', '"Health Facility"'
            buildConfigField "String", 'PNC_PLAN_ID', '"d652d9ae-2ff9-41e4-9bb3-fd4cd2ea0e2e"'
        }
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/*'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}


tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.0.9'

    api ('org.smartregister:opensrp-client-core:3.1.0.4-GS-PREVIEW-SNAPSHOT'){
        transitive = true
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
        exclude group: 'org.smartregister', module: 'opensrp-plan-evaluator'
    }

    implementation (project(':opensrp-tasking')) {
        //implementation ('org.smartregister:opensrp-client-tasking:0.0.3.2-SNAPSHOT') {
        exclude group: 'org.smartregister', module: 'opensrp-plan-evaluator'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
        exclude group: 'io.ona.rdt-capture'
    }

    implementation('org.smartregister:opensrp-client-chw-core:1.6.0.2-GS-PREVIEW-SNAPSHOT') {
        transitive = true
        exclude group: 'com.android.support', module: 'appcompat-v7'
        exclude group: 'androidx.legacy', module: 'legacy-support-v4'
        exclude group: 'androidx.appcompat', module: 'appcompat'
        exclude group: 'androidx.constraintlayout', module: 'constraintlayout'
        exclude group: 'com.google.guava', module: 'guava'
        exclude group: 'com.rengwuxian.materialedittext', module: 'library'
        exclude group: 'org.smartregister', module: 'opensrp-client-simprints'
        exclude group: 'org.smartregister', module: 'opensrp-plan-evaluator'
        exclude group: 'org.smartregister', module: 'opensrp-client-core'
    }

    implementation ('org.smartregister:opensrp-plan-evaluator:0.1.6.4-GS-SNAPSHOT'){
        transitive = true
        exclude group: 'com.ibm.fhir', module: 'fhir-model'
    }

    //Do not upgrade to 1.1.0 due to compatibility issues
    implementation 'androidx.appcompat:appcompat:1.0.2'

    implementation 'com.google.android.material:material:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.google.guava:guava:20.0'

    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    api 'io.reactivex.rxjava2:rxandroid:2.1.1'
    api 'com.evernote:android-job:1.2.6'
    api 'org.greenrobot:eventbus:3.1.1'
    /*api('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
        transitive = true
    }*/

    // Test dependencies
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'org.mockito:mockito-android:3.0.0'

    testImplementation 'org.mockito:mockito-core:3.1.0'
    testImplementation 'org.mockito:mockito-inline:2.13.0'
    testImplementation 'org.robolectric:robolectric:4.3.1'
    testImplementation 'org.robolectric:shadows-multidex:4.3.1'
    //testImplementation 'org.robolectric:shadows-support-v4:3.4-rc2'
    testImplementation 'androidx.test:core:1.0.0'

    // PowerMock
    def powerMockVersion = '2.0.0'
    testImplementation "org.powermock:powermock-module-junit4:$powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4-rule:$powerMockVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$powerMockVersion"
    testImplementation "org.powermock:powermock-classloading-xstream:$powerMockVersion"


    jarJar 'com.ibm.fhir:fhir-model:4.2.3'
    // Repackaged jars will be placed here, adding them to classpath
    implementation fileTree(dir: "./build/libs", include: ['*.jar'])
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getReports().getXml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"))
    getReports().getHtml().setDestination(file("${buildDir}/reports/jacoco/jacocoRootReport/html"))

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$ViewBinder*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.from(files([mainSrc]))
    classDirectories.from(files([debugTree]))
    executionData(fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ]))
}

coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/merged.xml"
    sourceDirs = ["$project.projectDir/src/main/java"]
}

tasks.coveralls {
    dependsOn 'jacocoTestReport'
}


jarJar {
    // Dependencies and related JarJar rules
    remove = ['fhir-model-4.2.3.jar': 'com.ibm.fhir.model.visitor.CopyingVisitor*']
}
